@using RikaWebApp.ViewModels
@model ProductViewModel


<section class="product-details" data-variants='@Html.Raw(System.Text.Json.JsonSerializer.Serialize(Model.Variants))' data-product-id="@Model.ProductId">
    <div class="container">

        <div class="back-icon">
            <a asp-controller="ProductByCategory" asp-action="Index" asp-route-categoryName="@ViewData["CategoryName"]">
                <i class="fa-regular fa-arrow-left"></i>
            </a>
        </div>

        <div class="shop-icon">
            <a href="#" >
                <i class="fa-regular fa-bag-shopping"></i>
            </a>
        </div>

        <div class="product-image">
            <div id="carouselIndicators" class="carousel slide" data-bs-touch="true">
                <ul class="carousel-indicators">
                    @if(Model.Images.Count > 1)
                    {
                        @for (int i = 0; i < Model.Images.Count; i++)
                        {
                            <li data-bs-target="#carouselIndicators" data-bs-slide-to="@i" class="@(i == 0 ? "active" : "")"></li>
                        }
                    }
                </ul>
                <div class="carousel-inner">
                    @for (int i = 0; i < Model.Images.Count; i++)
                    {
                        <div class="carousel-item @(i == 0 ? "active" : "")">
                            <img class="d-block w-100" src="@Model.Images[i]" alt="@Model.Name">
                        </div>
                    }
                </div>
                @if(Model.Images.Count > 1)
                {
                    <button class="carousel-control-prev" type="button" data-bs-target="#carouselIndicators" data-bs-slide="prev">
                        <span class="carousel-control-prev-icon" aria-hidden="true"></span>
                        <span class="visually-hidden">Previous</span>
                    </button>
                    <button class="carousel-control-next" type="button" data-bs-target="#carouselIndicators" data-bs-slide="next">
                        <span class="carousel-control-next-icon" aria-hidden="true"></span>
                        <span class="visually-hidden">Next</span>
                    </button>
                }
            </div>
        </div>

        <div class="product-detail-content">
            <div class="header">
                <div class="header-text">
                    <h6>@Model.Name</h6>
                    <p>Subtitle(?)</p>
                    <div class="rating">
                        @if (Model.Reviews != null && Model.Reviews.Any())
                        {
                            var averageRating = Model.Reviews.Average(r => r.Rating);
                            int fullStars = (int)averageRating;
                            int totalReviews = Model.Reviews.Count;

                            for (int i = 1; i <= 5; i++)
                            {
                                if (i <= fullStars)
                                {
                                    <i class="fas fa-star"></i> 
                                }
                                else
                                {
                                    <i class="far fa-star"></i> 
                                }
                            }
                            <a asp-controller="Reviews" asp-action="Index" asp-route-categoryName="@ViewData["CategoryName"]" asp-route-productId="@Model.ProductId" class="review-link">
                                (@totalReviews Reviews)
                            </a>
                        }
                        else
                        {
                            <p>Finns inga recensioner ännu</p>
                        }
                    </div>
                </div>

                <div class="counter">
                    <div class="input-group" style="max-width: 120px;">
                        <button class="btn btn-outline-secondary" type="button" id="decrement">-</button>
                        <input type="text" class="form-control text-center" value="1" id="quantity" readonly>
                        <button class="btn btn-outline-secondary" type="button" id="increment">+</button>
                    </div>
                    <div class="stock" id="stockStatus">
                        <span id="chooseColorText"></span>
                    </div>
                </div>
                <div class="heart-icon">
                    <button type="button" class="btn favorite-btn" data-product-id="@Model.ProductId">
                        <i id="favoriteIcon-@Model.ProductId" class="fa-regular fa-heart"></i>
                    </button>
                </div>
            </div>

            <div class="mid-content">
                    <h6>Size</h6>
                <div class="size-container">

                    <div class="size-selection">
                        @if (Model.Variants != null && Model.Variants.Any())
                        {
                            <div class="size-carousel">
                                <a class="carousel-btn" id="prev-size-btn" disabled>&lt;</a>

                                <div class="size-list-container" id="size-list-container">
                                    <div class="size-list" id="size-list">
                                        @foreach (var variant in Model.Variants.DistinctBy(v => v.Size))
                                        {
                                            <button class="btn-round size-btn" data-size="@variant.Size">@variant.Size</button>
                                        }
                                    </div>
                                </div>

                                <a class="carousel-btn" id="next-size-btn">&gt;</a>
                            </div>
                        }
                    </div>
                </div>

                <div class="color-selection">
                    @if (Model.Variants != null && Model.Variants.Any())
                    {
                        @foreach (var variant in Model.Variants.DistinctBy(v => v.Color))
                        {
                            <a class="btn-round color-btn
                              @(variant.Color.ToLower() == "multicolor" || variant.Color.ToLower() == "rainbow" ? "rainbow" : "")
                              @(variant.Color.ToLower() == "black" ? "black-bg" : "")"
                               data-color="@variant.Color" title="@variant.Color"
                               style="@(variant.Color.ToLower() == "rainbow" ? "" : $"background-color: {variant.Color};")">
                                <span class="checkmark">✔</span>
                            </a>
                        }
                    }
                    else
                    {
                        <p>No available colors</p>
                    }
                </div>
            </div>

            <div class="product-description">
                <h6>Description</h6>
                <p>@Model.Description</p>
            </div>

            <div class="bottom">
                <div class="price">
                    <span>Total Price</span>
                    <p id="displayPrice">$@Model.Variants?.FirstOrDefault()?.Price</p>
                </div>
                <div class="add-to-cart">
                    <button id="addToCartButton" class="btn-round primary">
                        <i class="fa-regular fa-bag-shopping"></i> Add to cart
                    </button>
                </div>
            </div>
            <p id="errorMessage" class="error"></p>
        </div>
    </div>
</section>


 <script>

    document.addEventListener("DOMContentLoaded", function () {
        // hämta produktvarianter från data-attributes
        const productDetails = document.querySelector('.product-details');
        const variantsData = productDetails.getAttribute('data-variants'); // hämta JSON-strängen
        const variants = JSON.parse(variantsData); // ovandla till JavaScript-objekt

        console.log("Produktvarianter:", variants);


        // funktion för att uppdatera lagerstatus och visa produktens lagerinfo
        function updateStockStatus() {
            const stockElement = document.querySelector('.stock');
            const incrementBtn = document.getElementById('increment');
            const decrementBtn = document.getElementById('decrement');
            const addToCartBtn = document.getElementById('addToCartButton');
            const quantity = document.getElementById('quantity');
            const priceElement = document.getElementById('displayPrice');


            stockElement.innerHTML = '';

            // hämta användarens val
            const selectedColor = document.querySelector('.color-btn.selected')?.getAttribute('data-color');
            const selectedSize = document.querySelector('.size-btn.selected')?.getAttribute('data-size');


            if (!selectedSize) {
                stockElement.innerHTML = 'Please select a size';
                incrementBtn.disabled = true;
                decrementBtn.disabled = true;
                addToCartBtn.disabled = true;
                return;
            }

            if (!selectedColor) {
                stockElement.innerHTML = 'Please select a color';
                incrementBtn.disabled = true;
                decrementBtn.disabled = true;
                addToCartBtn.disabled = true;
                return;
            }

            // hittar den specifika produktvarianten baserat på storlek och färg
            const variant = variants.find(v => v.Color.toLowerCase() === selectedColor.toLowerCase() && v.Size === selectedSize);

            // uppdatera lagerinformation samt aktiverar/inaktiverar knappar baserat på lagerstatusen
            if (variant) {
                if (variant.Stock > 0) {
                    stockElement.innerHTML = `Available in stock (${variant.Stock})`;
                    quantity.value = 1;
                    incrementBtn.disabled = variant.Stock <= 1;
                    decrementBtn.disabled = true;
                    addToCartBtn.disabled = false;
                } else {
                    stockElement.innerHTML = 'Out of stock';
                    quantity.value = 0;
                    incrementBtn.disabled = true;
                    decrementBtn.disabled = true;
                    addToCartBtn.disabled = true;
                }

                // uppdatera priset baserat på vald variant
                priceElement.innerHTML = `$${variant.Price.toFixed(2)}`;
            } else {
                stockElement.innerHTML = 'Price is not available';
                incrementBtn.disabled = true;
                decrementBtn.disabled = true;
                addToCartBtn.disabled = true;
            }
        }

        //eventlistener för klickhändelser på storleksknapparna för att uppdatera lager och färgvalet
        document.querySelectorAll('.size-btn').forEach(btn => {
            btn.addEventListener('click', function () {
                // ta bort markering från alla storleksknappar och markera den som användaren klickade på
                document.querySelectorAll('.size-btn').forEach(btn => btn.classList.remove('selected'));
                this.classList.add('selected');

                // återställ felmeddelande och sätt kvantiteten till 1
                const chooseColorText = document.getElementById('chooseColorText');
                if (chooseColorText) {
                    chooseColorText.classList.remove('error');
                    chooseColorText.innerText = '';
                }

                // sätt kvantiteten till 1 när man bytar storlek
                document.getElementById('quantity').value = 1;

                // visar färgsektionen och uppdatera färger för vald storlek
                document.querySelector('.color-selection').style.display = 'flex';
                updateAvailableColors(this.getAttribute('data-size'));

                // nollställ färgvalet
                document.querySelectorAll('.color-btn').forEach(btn => {
                    btn.classList.remove('selected');
                    btn.querySelector('.checkmark').style.display = 'none';
                });

                // uppdatera lagerstatus
                updateStockStatus();
            });
        });

        //funktion för att uuppdatera färgalternativen baserat på den valda storleken
        function updateAvailableColors(selectedSize) {
            const variants = @Html.Raw(System.Text.Json.JsonSerializer.Serialize(Model.Variants));

            const availableColors = variants
                .filter(v => v.Size === selectedSize)
                .map(v => v.Color.toLowerCase());

            document.querySelectorAll('.color-btn').forEach(btn => {
                const color = btn.getAttribute('data-color').toLowerCase();
                btn.style.display = availableColors.includes(color) ? 'inline-block' : 'none';
            });
        }

        // eventlistener för färgknappar för att markera val och uppdatera lager
        document.querySelectorAll('.color-btn').forEach(btn => {
            const checkmark = document.createElement('span');
            checkmark.classList.add('checkmark');
            checkmark.innerHTML = '✔️';
            checkmark.style.display = 'none';
            btn.appendChild(checkmark);

            btn.addEventListener('click', function () {
                document.querySelectorAll('.color-btn').forEach(btn => {
                    btn.classList.remove('selected');
                    btn.querySelector('.checkmark').style.display = 'none';
                });
                this.classList.add('selected');
                this.querySelector('.checkmark').style.display = 'inline';
                updateStockStatus();
            });
        });

        // eventlistener för att öka kvantiteten
        document.getElementById('increment').addEventListener('click', function () {
            const quantity = document.getElementById('quantity');
            const selectedColor = document.querySelector('.color-btn.selected')?.getAttribute('data-color');
            const selectedSize = document.querySelector('.size-btn.selected')?.getAttribute('data-size');
            const chooseColorText = document.getElementById('chooseColorText');

            // kontrollera att storlek och färg är valda
            if (!selectedSize) {
                if (chooseColorText) {
                    chooseColorText.classList.add('error');
                    chooseColorText.innerText = 'Please select a size';
                }
                return;
            }

            if (!selectedColor) {
                if (chooseColorText) {
                    chooseColorText.classList.add('error');
                    chooseColorText.innerText = 'Please select a color';
                }
                return;
            }

            const variants = @Html.Raw(System.Text.Json.JsonSerializer.Serialize(Model.Variants));
            const variant = variants.find(v => v.Color.toLowerCase() === selectedColor.toLowerCase() && v.Size === selectedSize);

            if (variant && parseInt(quantity.value) < variant.Stock) {
                quantity.value = parseInt(quantity.value) + 1;
                document.getElementById('decrement').disabled = false;

                if (parseInt(quantity.value) >= variant.Stock) {
                    document.getElementById('increment').disabled = true;
                }
            }
        });

        // eventlistener för att minska kvantiteten
        document.getElementById('decrement').addEventListener('click', function () {
            const quantity = document.getElementById('quantity');

            if (parseInt(quantity.value) > 1) {
                quantity.value = parseInt(quantity.value) - 1;

                document.getElementById('increment').disabled = false;

                if (parseInt(quantity.value) <= 1) {
                    document.getElementById('decrement').disabled = true;
                }
            }
        });


        //lägg till i kundvagn
        document.getElementById('addToCartButton').addEventListener('click', () => {
            const productId = "@Model.ProductId";
            const selectedSize = document.querySelector('.size-btn.selected')?.getAttribute('data-size');
            const selectedColor = document.querySelector('.color-btn.selected')?.getAttribute('data-color');
            const quantity = document.getElementById('quantity').value;

            if (!selectedColor || !selectedSize) {
                alert('You have to chose a size and color');
                return;
            } else {
                // skriv ut valda alternativ
                console.log("produkt id:", productId);
                console.log("vald storlek:", selectedSize);
                console.log("vald färg:", selectedColor);
                console.log("antal:", quantity);
            }
            console.log(`Produkt id: ${productId} attribut (${selectedSize}, ${selectedColor}, ${quantity} st) har lagts till i kundvagnen.`);


        });

        //funktion för att bläddra bland storlekar
            const sizeList = document.getElementById("size-list");
            const sizeListContainer = document.getElementById("size-list-container");
            const sizeButtons = sizeList.querySelectorAll(".size-btn");
            const prevBtn = document.getElementById("prev-size-btn");
            const nextBtn = document.getElementById("next-size-btn");

            let position = 0; // startposition för karusellen
            const visibleCount = 4; // antal synliga storlekar för mobilläge
            const totalSizes = sizeButtons.length;
            const buttonWidth = 35; // justera baserat på knappbredd och marginal

            //funktion för att uppdatera synligheten för < > knappar
            function updateButtons() {
                prevBtn.classList.toggle("hidden", position === 0);
                nextBtn.classList.toggle("hidden", position >= totalSizes - visibleCount);
            }

            //funktion för att scrolla karusellen baserat på riktning (< eller >)
            function scrollSizes(direction) {
                const maxPosition = totalSizes - visibleCount;
                if (direction === "next" && position < maxPosition) {
                    position++;
                } else if (direction === "prev" && position > 0) {
                    position--;
                }
                position = Math.max(0, Math.min(position, maxPosition));
                sizeList.style.transform = `translateX(-${position * buttonWidth}px)`;

                //uppdaterar knapoarnas tillstånd efter scrolling
                updateButtons();
            }
            //eventlistener för bläddringsknapparna (< >)
            prevBtn.addEventListener("click", function () {
                scrollSizes("prev");
            });

            nextBtn.addEventListener("click", function () {
                scrollSizes("next");
            });

            // swipe-funktionalitet
            let startX = 0;

            sizeListContainer.addEventListener("touchstart", function (e) {
                startX = e.touches[0].clientX;
            });

            //eventlistener för att hantera rörelse under swipe och bläddrar baserat på riktining
            sizeListContainer.addEventListener("touchmove", function (e) {
                const touch = e.touches[0];
                const deltaX = touch.clientX - startX;

                if (Math.abs(deltaX) > 30) {
                    if (deltaX < 0) {
                        scrollSizes("next");
                    } else {
                        scrollSizes("prev");
                    }
                    startX = touch.clientX; // återställ startX för nästa svep
                }
            });

            // uppdatera knapparnas tillstånd vid laddning
            updateButtons();
        });
 </script>